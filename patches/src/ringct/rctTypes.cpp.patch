--- monero/src/ringct/rctTypes.cpp	2020-08-05 16:35:28.000000000 +0200
+++ monero-new/src/ringct/rctTypes.cpp	2020-08-05 16:32:05.000000000 +0200
@@ -31,6 +31,7 @@
 #include "misc_log_ex.h"
 #include "cryptonote_config.h"
 #include "rctTypes.h"
+#include "int-util.h"
 using namespace crypto;
 using namespace std;
 
@@ -118,40 +119,22 @@ namespace rct {
     //uint long long to 32 byte key
     void d2h(key & amounth, const xmr_amount in) {
         sc_0(amounth.bytes);
-        xmr_amount val = in;
-        int i = 0;
-        while (val != 0) {
-            amounth[i] = (unsigned char)(val & 0xFF);
-            i++;
-            val /= (xmr_amount)256;
-        }
+        memcpy_swap64le(amounth.bytes, &in, 1);
     }
     
     //uint long long to 32 byte key
     key d2h(const xmr_amount in) {
         key amounth;
-        sc_0(amounth.bytes);
-        xmr_amount val = in;
-        int i = 0;
-        while (val != 0) {
-            amounth[i] = (unsigned char)(val & 0xFF);
-            i++;
-            val /= (xmr_amount)256;
-        }
+        d2h(amounth, in);
         return amounth;
     }
 
     //uint long long to int[64]
     void d2b(bits  amountb, xmr_amount val) {
         int i = 0;
-        while (val != 0) {
-            amountb[i] = val & 1;
-            i++;
-            val >>= 1;
-        }
         while (i < 64) {
-            amountb[i] = 0;
-            i++;
+            amountb[i++] = val & 1;
+            val >>= 1;
         }
     }
     
@@ -172,16 +155,11 @@ namespace rct {
         int val = 0, i = 0, j = 0;
         for (j = 0; j < 8; j++) {
             val = (unsigned char)test.bytes[j];
-            i = 8 * j;
-            while (val != 0) {
-                amountb2[i] = val & 1;
-                i++;
+            i = 0;
+            while (i < 8) {
+                amountb2[j*8+i++] = val & 1;
                 val >>= 1;
             }
-            while (i < 8 * (j + 1)) {
-                amountb2[i] = 0;
-                i++;
-            }
         }
     }
     
@@ -190,7 +168,6 @@ namespace rct {
         int byte, i, j;
         for (j = 0; j < 8; j++) {
             byte = 0;
-            i = 8 * j;
             for (i = 7; i > -1; i--) {
                 byte = byte * 2 + amountb2[8 * j + i];
             }
@@ -218,6 +195,7 @@ namespace rct {
             case RCTTypeSimple:
             case RCTTypeBulletproof:
             case RCTTypeBulletproof2:
+            case RCTTypeCLSAG:
                 return true;
             default:
                 return false;
@@ -230,6 +208,7 @@ namespace rct {
         {
             case RCTTypeBulletproof:
             case RCTTypeBulletproof2:
+            case RCTTypeCLSAG:
                 return true;
             default:
                 return false;
