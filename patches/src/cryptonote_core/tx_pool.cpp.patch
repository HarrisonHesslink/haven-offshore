--- monero/src/cryptonote_core/tx_pool.cpp	2020-06-30 14:49:37.554511216 +0100
+++ monero-offshore/src/cryptonote_core/tx_pool.cpp	2020-06-30 12:11:06.805937244 +0100
@@ -82,8 +82,8 @@ namespace cryptonote
 
     uint64_t get_transaction_weight_limit(uint8_t version)
     {
-      // from v8, limit a tx to 50% of the minimum block weight
-      if (version >= 8)
+      // from v5, limit a tx to 50% of the minimum block weight
+      if (version >= 5)
         return get_min_block_weight(version) / 2 - CRYPTONOTE_COINBASE_BLOB_RESERVED_SIZE;
       else
         return get_min_block_weight(version) - CRYPTONOTE_COINBASE_BLOB_RESERVED_SIZE;
@@ -147,7 +147,7 @@ namespace cryptonote
     }
 
     // fee per kilobyte, size rounded up.
-    uint64_t fee;
+    uint64_t fee = 0, fee_usd = 0, offshore_fee = 0, offshore_fee_usd = 0;
 
     if (tx.version == 1)
     {
@@ -179,15 +179,22 @@ namespace cryptonote
     else
     {
       fee = tx.rct_signatures.txnFee;
+      fee_usd = tx.rct_signatures.txnFee_usd;
+      offshore_fee = tx.rct_signatures.txnOffshoreFee;
+      offshore_fee_usd = tx.rct_signatures.txnOffshoreFee_usd;
     }
 
-    if (!kept_by_block && !m_blockchain.check_fee(tx_weight, fee))
+    if (!kept_by_block && ((tx.version < OFFSHORE_TRANSACTION_VERSION) || (tx.pricing_record_height == 0)) && !m_blockchain.check_fee(tx_weight, fee))
     {
       tvc.m_verifivation_failed = true;
       tvc.m_fee_too_low = true;
       return false;
     }
 
+    // HERE BE DRAGONS!!!
+    // NEAC: Verify the offshore conversion fee is present and correct here
+    // LAND AHOY!!!
+    
     size_t tx_weight_limit = get_transaction_weight_limit(version);
     if ((!kept_by_block || version >= HF_VERSION_PER_BYTE_FEE) && tx_weight > tx_weight_limit)
     {
@@ -237,6 +244,9 @@ namespace cryptonote
       {
         meta.weight = tx_weight;
         meta.fee = fee;
+	meta.fee_usd = fee_usd;
+	meta.offshore_fee = offshore_fee;
+	meta.offshore_fee_usd = offshore_fee_usd;
         meta.max_used_block_id = null_hash;
         meta.max_used_block_height = 0;
         meta.last_failed_height = 0;
@@ -281,6 +291,9 @@ namespace cryptonote
       meta.weight = tx_weight;
       meta.kept_by_block = kept_by_block;
       meta.fee = fee;
+      meta.fee_usd = fee_usd;
+      meta.offshore_fee = offshore_fee;
+      meta.offshore_fee_usd = offshore_fee_usd;
       meta.max_used_block_id = max_used_block_id;
       meta.max_used_block_height = max_used_block_height;
       meta.last_failed_height = 0;
@@ -313,8 +326,12 @@ namespace cryptonote
       }
       tvc.m_added_to_pool = true;
 
-      if(meta.fee > 0 && !do_not_relay)
+      if(meta.fee > 0 && !do_not_relay) {
         tvc.m_should_be_relayed = true;
+      } else if (!do_not_relay && ((tx.version >= OFFSHORE_TRANSACTION_VERSION) && (tx.pricing_record_height != 0))) {
+	LOG_PRINT_L1("tx meta.fee is 0, but this is an offshore TX, so relaying enabled");
+        tvc.m_should_be_relayed = true;
+      }
     }
 
     tvc.m_verifivation_failed = false;
@@ -413,15 +430,41 @@ namespace cryptonote
   //---------------------------------------------------------------------------------
   bool tx_memory_pool::insert_key_images(const transaction_prefix &tx, const crypto::hash &id, bool kept_by_block)
   {
-    for(const auto& in: tx.vin)
-    {
-      CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, txin, false);
-      std::unordered_set<crypto::hash>& kei_image_set = m_spent_key_images[txin.k_image];
-      CHECK_AND_ASSERT_MES(kept_by_block || kei_image_set.size() == 0, false, "internal error: kept_by_block=" << kept_by_block
-                                          << ",  kei_image_set.size()=" << kei_image_set.size() << ENDL << "txin.k_image=" << txin.k_image << ENDL
-                                          << "tx_id=" << id );
-      auto ins_res = kei_image_set.insert(id);
-      CHECK_AND_ASSERT_MES(ins_res.second, false, "internal error: try to insert duplicate iterator in key_image set");
+    if (tx.vin[0].type() == typeid(txin_to_key)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, txin, false);
+	  std::unordered_set<crypto::hash>& kei_image_set = m_spent_key_images[txin.k_image];
+	  CHECK_AND_ASSERT_MES(kept_by_block || kei_image_set.size() == 0, false, "internal error: kept_by_block=" << kept_by_block
+			       << ",  kei_image_set.size()=" << kei_image_set.size() << ENDL << "txin.k_image=" << txin.k_image << ENDL
+			       << "tx_id=" << id );
+	  auto ins_res = kei_image_set.insert(id);
+	  CHECK_AND_ASSERT_MES(ins_res.second, false, "internal error: try to insert duplicate iterator in key_image set");
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_offshore)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_offshore, txin, false);
+	  std::unordered_set<crypto::hash>& kei_image_set = m_spent_key_images[txin.k_image];
+	  CHECK_AND_ASSERT_MES(kept_by_block || kei_image_set.size() == 0, false, "internal error: kept_by_block=" << kept_by_block
+			       << ",  kei_image_set.size()=" << kei_image_set.size() << ENDL << "txin.k_image=" << txin.k_image << ENDL
+			       << "tx_id=" << id );
+	  auto ins_res = kei_image_set.insert(id);
+	  CHECK_AND_ASSERT_MES(ins_res.second, false, "internal error: try to insert duplicate iterator in key_image set");
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_onshore)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_onshore, txin, false);
+	  std::unordered_set<crypto::hash>& kei_image_set = m_spent_key_images[txin.k_image];
+	  CHECK_AND_ASSERT_MES(kept_by_block || kei_image_set.size() == 0, false, "internal error: kept_by_block=" << kept_by_block
+			       << ",  kei_image_set.size()=" << kei_image_set.size() << ENDL << "txin.k_image=" << txin.k_image << ENDL
+			       << "tx_id=" << id );
+	  auto ins_res = kei_image_set.insert(id);
+	  CHECK_AND_ASSERT_MES(ins_res.second, false, "internal error: try to insert duplicate iterator in key_image set");
+	}
     }
     ++m_cookie;
     return true;
@@ -435,32 +478,77 @@ namespace cryptonote
     CRITICAL_REGION_LOCAL(m_transactions_lock);
     CRITICAL_REGION_LOCAL1(m_blockchain);
     // ND: Speedup
-    for(const txin_v& vi: tx.vin)
-    {
-      CHECKED_GET_SPECIFIC_VARIANT(vi, const txin_to_key, txin, false);
-      auto it = m_spent_key_images.find(txin.k_image);
-      CHECK_AND_ASSERT_MES(it != m_spent_key_images.end(), false, "failed to find transaction input in key images. img=" << txin.k_image << ENDL
-                                    << "transaction id = " << actual_hash);
-      std::unordered_set<crypto::hash>& key_image_set =  it->second;
-      CHECK_AND_ASSERT_MES(key_image_set.size(), false, "empty key_image set, img=" << txin.k_image << ENDL
-        << "transaction id = " << actual_hash);
+    if (tx.vin[0].type() == typeid(txin_onshore)) {
+      for(const txin_v& vi: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(vi, const txin_onshore, txin, false);
+	  auto it = m_spent_key_images.find(txin.k_image);
+	  CHECK_AND_ASSERT_MES(it != m_spent_key_images.end(), false, "failed to find transaction input in key images. img=" << txin.k_image << ENDL
+			       << "transaction id = " << actual_hash);
+	  std::unordered_set<crypto::hash>& key_image_set =  it->second;
+	  CHECK_AND_ASSERT_MES(key_image_set.size(), false, "empty key_image set, img=" << txin.k_image << ENDL
+			       << "transaction id = " << actual_hash);
 
-      auto it_in_set = key_image_set.find(actual_hash);
-      CHECK_AND_ASSERT_MES(it_in_set != key_image_set.end(), false, "transaction id not found in key_image set, img=" << txin.k_image << ENDL
-        << "transaction id = " << actual_hash);
-      key_image_set.erase(it_in_set);
-      if(!key_image_set.size())
-      {
-        //it is now empty hash container for this key_image
-        m_spent_key_images.erase(it);
-      }
+	  auto it_in_set = key_image_set.find(actual_hash);
+	  CHECK_AND_ASSERT_MES(it_in_set != key_image_set.end(), false, "transaction id not found in key_image set, img=" << txin.k_image << ENDL
+			       << "transaction id = " << actual_hash);
+	  key_image_set.erase(it_in_set);
+	  if(!key_image_set.size())
+	    {
+	      //it is now empty hash container for this key_image
+	      m_spent_key_images.erase(it);
+	    }
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_offshore)) {
+      for(const txin_v& vi: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(vi, const txin_offshore, txin, false);
+	  auto it = m_spent_key_images.find(txin.k_image);
+	  CHECK_AND_ASSERT_MES(it != m_spent_key_images.end(), false, "failed to find transaction input in key images. img=" << txin.k_image << ENDL
+			       << "transaction id = " << actual_hash);
+	  std::unordered_set<crypto::hash>& key_image_set =  it->second;
+	  CHECK_AND_ASSERT_MES(key_image_set.size(), false, "empty key_image set, img=" << txin.k_image << ENDL
+			       << "transaction id = " << actual_hash);
 
+	  auto it_in_set = key_image_set.find(actual_hash);
+	  CHECK_AND_ASSERT_MES(it_in_set != key_image_set.end(), false, "transaction id not found in key_image set, img=" << txin.k_image << ENDL
+			       << "transaction id = " << actual_hash);
+	  key_image_set.erase(it_in_set);
+	  if(!key_image_set.size())
+	    {
+	      //it is now empty hash container for this key_image
+	      m_spent_key_images.erase(it);
+	    }
+	}
+    }
+    else {
+      for(const txin_v& vi: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(vi, const txin_to_key, txin, false);
+	  auto it = m_spent_key_images.find(txin.k_image);
+	  CHECK_AND_ASSERT_MES(it != m_spent_key_images.end(), false, "failed to find transaction input in key images. img=" << txin.k_image << ENDL
+			       << "transaction id = " << actual_hash);
+	  std::unordered_set<crypto::hash>& key_image_set =  it->second;
+	  CHECK_AND_ASSERT_MES(key_image_set.size(), false, "empty key_image set, img=" << txin.k_image << ENDL
+			       << "transaction id = " << actual_hash);
+
+	  auto it_in_set = key_image_set.find(actual_hash);
+	  CHECK_AND_ASSERT_MES(it_in_set != key_image_set.end(), false, "transaction id not found in key_image set, img=" << txin.k_image << ENDL
+			       << "transaction id = " << actual_hash);
+	  key_image_set.erase(it_in_set);
+	  if(!key_image_set.size())
+	    {
+	      //it is now empty hash container for this key_image
+	      m_spent_key_images.erase(it);
+	    }
+	}
     }
     ++m_cookie;
     return true;
   }
   //---------------------------------------------------------------------------------
-  bool tx_memory_pool::take_tx(const crypto::hash &id, transaction &tx, cryptonote::blobdata &txblob, size_t& tx_weight, uint64_t& fee, bool &relayed, bool &do_not_relay, bool &double_spend_seen)
+  bool tx_memory_pool::take_tx(const crypto::hash &id, transaction &tx, cryptonote::blobdata &txblob, size_t& tx_weight, uint64_t& fee, uint64_t& fee_usd, uint64_t& offshore_fee, uint64_t& offshore_fee_usd, bool &relayed, bool &do_not_relay, bool &double_spend_seen)
   {
     CRITICAL_REGION_LOCAL(m_transactions_lock);
     CRITICAL_REGION_LOCAL1(m_blockchain);
@@ -493,6 +581,9 @@ namespace cryptonote
       }
       tx_weight = meta.weight;
       fee = meta.fee;
+      fee_usd = meta.fee_usd;
+      offshore_fee = meta.offshore_fee;
+      offshore_fee_usd = meta.offshore_fee_usd;
       relayed = meta.relayed;
       do_not_relay = meta.do_not_relay;
       double_spend_seen = meta.double_spend_seen;
@@ -957,11 +1048,29 @@ namespace cryptonote
   {
     CRITICAL_REGION_LOCAL(m_transactions_lock);
     CRITICAL_REGION_LOCAL1(m_blockchain);
-    for(const auto& in: tx.vin)
-    {
-      CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, tokey_in, true);//should never fail
-      if(have_tx_keyimg_as_spent(tokey_in.k_image))
-         return true;
+    if (tx.vin[0].type() == typeid(txin_to_key)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, tokey_in, true);//should never fail
+	  if(have_tx_keyimg_as_spent(tokey_in.k_image))
+	    return true;
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_offshore)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_offshore, tokey_in, true);//should never fail
+	  if(have_tx_keyimg_as_spent(tokey_in.k_image))
+	    return true;
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_onshore)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_onshore, tokey_in, true);//should never fail
+	  if(have_tx_keyimg_as_spent(tokey_in.k_image))
+	    return true;
+	}
     }
     return false;
   }
@@ -1070,22 +1179,58 @@ namespace cryptonote
   //---------------------------------------------------------------------------------
   bool tx_memory_pool::have_key_images(const std::unordered_set<crypto::key_image>& k_images, const transaction_prefix& tx)
   {
-    for(size_t i = 0; i!= tx.vin.size(); i++)
-    {
-      CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_to_key, itk, false);
-      if(k_images.count(itk.k_image))
-        return true;
+    if (tx.vin[0].type() == typeid(txin_to_key)) {
+      for(size_t i = 0; i!= tx.vin.size(); i++)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_to_key, itk, false);
+	  if(k_images.count(itk.k_image))
+	    return true;
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_offshore)) {
+      for(size_t i = 0; i!= tx.vin.size(); i++)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_offshore, itk, false);
+	  if(k_images.count(itk.k_image))
+	    return true;
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_onshore)) {
+      for(size_t i = 0; i!= tx.vin.size(); i++)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_onshore, itk, false);
+	  if(k_images.count(itk.k_image))
+	    return true;
+	}
     }
     return false;
   }
   //---------------------------------------------------------------------------------
   bool tx_memory_pool::append_key_images(std::unordered_set<crypto::key_image>& k_images, const transaction_prefix& tx)
   {
-    for(size_t i = 0; i!= tx.vin.size(); i++)
-    {
-      CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_to_key, itk, false);
-      auto i_res = k_images.insert(itk.k_image);
-      CHECK_AND_ASSERT_MES(i_res.second, false, "internal error: key images pool cache - inserted duplicate image in set: " << itk.k_image);
+    if (tx.vin[0].type() == typeid(txin_to_key)) {
+      for(size_t i = 0; i!= tx.vin.size(); i++)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_to_key, itk, false);
+	  auto i_res = k_images.insert(itk.k_image);
+	  CHECK_AND_ASSERT_MES(i_res.second, false, "internal error: key images pool cache - inserted duplicate image in set: " << itk.k_image);
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_offshore)) {
+      for(size_t i = 0; i!= tx.vin.size(); i++)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_offshore, itk, false);
+	  auto i_res = k_images.insert(itk.k_image);
+	  CHECK_AND_ASSERT_MES(i_res.second, false, "internal error: key images pool cache - inserted duplicate image in set: " << itk.k_image);
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_onshore)) {
+      for(size_t i = 0; i!= tx.vin.size(); i++)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_onshore, itk, false);
+	  auto i_res = k_images.insert(itk.k_image);
+	  CHECK_AND_ASSERT_MES(i_res.second, false, "internal error: key images pool cache - inserted duplicate image in set: " << itk.k_image);
+	}
     }
     return true;
   }
@@ -1098,8 +1243,18 @@ namespace cryptonote
     LockedTXN lock(m_blockchain);
     for(size_t i = 0; i!= tx.vin.size(); i++)
     {
-      CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_to_key, itk, void());
-      const key_images_container::const_iterator it = m_spent_key_images.find(itk.k_image);
+      crypto::key_image itk_key_image;
+      if (tx.vin[i].type() == typeid(txin_to_key)) {
+	CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_to_key, itk, void());
+        itk_key_image = itk.k_image;
+      } else if (tx.vin[i].type() == typeid(txin_onshore)) {
+	CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_onshore, itk, void());
+        itk_key_image = itk.k_image;
+      } else {
+	CHECKED_GET_SPECIFIC_VARIANT(tx.vin[i], const txin_offshore, itk, void());
+        itk_key_image = itk.k_image;
+      }
+      const key_images_container::const_iterator it = m_spent_key_images.find(itk_key_image);
       if (it != m_spent_key_images.end())
       {
         for (const crypto::hash &txid: it->second)
@@ -1113,7 +1268,7 @@ namespace cryptonote
           }
           if (!meta.double_spend_seen)
           {
-            MDEBUG("Marking " << txid << " as double spending " << itk.k_image);
+            MDEBUG("Marking " << txid << " as double spending " << itk_key_image);
             meta.double_spend_seen = true;
             changed = true;
             try
@@ -1166,7 +1321,7 @@ namespace cryptonote
   }
   //---------------------------------------------------------------------------------
   //TODO: investigate whether boolean return is appropriate
-  bool tx_memory_pool::fill_block_template(block &bl, size_t median_weight, uint64_t already_generated_coins, size_t &total_weight, uint64_t &fee, uint64_t &expected_reward, uint8_t version)
+  bool tx_memory_pool::fill_block_template(block &bl, size_t median_weight, uint64_t already_generated_coins, size_t &total_weight, uint64_t &fee, uint64_t &fee_usd, uint64_t &offshore_fee, uint64_t &offshore_fee_usd, uint64_t &expected_reward, uint8_t version)
   {
     CRITICAL_REGION_LOCAL(m_transactions_lock);
     CRITICAL_REGION_LOCAL1(m_blockchain);
@@ -1174,6 +1329,9 @@ namespace cryptonote
     uint64_t best_coinbase = 0, coinbase = 0;
     total_weight = 0;
     fee = 0;
+    fee_usd = 0;
+    offshore_fee = 0;
+    offshore_fee_usd = 0;
     
     //baseline empty block
     get_block_reward(median_weight, total_weight, already_generated_coins, best_coinbase, version);
@@ -1218,7 +1376,10 @@ namespace cryptonote
           continue;
         }
         coinbase = block_reward + fee + meta.fee;
+	/*
         if (coinbase < template_accept_threshold(best_coinbase))
+        */
+        if (coinbase < best_coinbase)
         {
           LOG_PRINT_L2("  would decrease coinbase to " << print_money(coinbase));
           continue;
@@ -1274,10 +1435,20 @@ namespace cryptonote
         LOG_PRINT_L2("  key images already seen");
         continue;
       }
-
+      if ((tx.version >= OFFSHORE_TRANSACTION_VERSION) && (tx.pricing_record_height != 0)) {
+	// Validate that pricing record is not too old
+	uint64_t current_height = m_blockchain.get_current_blockchain_height();
+	if ((current_height - PRICING_RECORD_VALID_BLOCKS) > tx.pricing_record_height) {
+	  LOG_PRINT_L2("  rejected - offshore transaction references a pricing record that is too old");
+	  continue;
+	}
+      }
       bl.tx_hashes.push_back(sorted_it->second);
       total_weight += meta.weight;
       fee += meta.fee;
+      fee_usd += meta.fee_usd;
+      offshore_fee += meta.offshore_fee;
+      offshore_fee_usd += meta.offshore_fee_usd;
       best_coinbase = coinbase;
       append_key_images(k_images, tx);
       LOG_PRINT_L2("  added, new block weight " << total_weight << "/" << max_total_weight << ", coinbase " << print_money(best_coinbase));
